"""Initial migration with matching platform models

Revision ID: 303211f93eb4
Revises: 
Create Date: 2025-09-06 13:54:30.173003

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '303211f93eb4'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('kinde_id', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('onboarding_completed', sa.Boolean(), nullable=True),
    sa.Column('profile_type_chosen', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_kinde_id'), 'users', ['kinde_id'], unique=True)
    op.create_table('owner_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('postcode', sa.String(length=10), nullable=False),
    sa.Column('visible_radius', sa.Integer(), nullable=False),
    sa.Column('available_days', sa.JSON(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('trial_period', sa.Integer(), nullable=True),
    sa.Column('duration', sa.String(length=50), nullable=True),
    sa.Column('contribution_required', sa.Integer(), nullable=True),
    sa.Column('deposit_required', sa.Integer(), nullable=True),
    sa.Column('instruction_available', sa.Boolean(), nullable=True),
    sa.Column('instruction_required', sa.Boolean(), nullable=True),
    sa.Column('supervision_required', sa.Boolean(), nullable=True),
    sa.Column('min_age_requirement', sa.Integer(), nullable=True),
    sa.Column('under_18_allowed', sa.Boolean(), nullable=True),
    sa.Column('id_required', sa.Boolean(), nullable=True),
    sa.Column('contract_required', sa.Boolean(), nullable=True),
    sa.Column('insurance_required', sa.Boolean(), nullable=True),
    sa.Column('insurance_requirements', sa.Text(), nullable=True),
    sa.Column('helmet_required', sa.Boolean(), nullable=True),
    sa.Column('boots_required', sa.Boolean(), nullable=True),
    sa.Column('stable_rules', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_owner_profiles_id'), 'owner_profiles', ['id'], unique=False)
    op.create_table('rider_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('photos', sa.JSON(), nullable=True),
    sa.Column('video_intro', sa.String(length=500), nullable=True),
    sa.Column('postcode', sa.String(length=10), nullable=False),
    sa.Column('max_travel_distance', sa.Integer(), nullable=False),
    sa.Column('available_days', sa.JSON(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('duration_preference', sa.String(length=50), nullable=True),
    sa.Column('budget_min', sa.Integer(), nullable=True),
    sa.Column('budget_max', sa.Integer(), nullable=True),
    sa.Column('years_experience', sa.Integer(), nullable=True),
    sa.Column('fnrs_level', sa.String(length=50), nullable=True),
    sa.Column('knhs_level', sa.String(length=50), nullable=True),
    sa.Column('lesson_history', sa.Text(), nullable=True),
    sa.Column('references', sa.Text(), nullable=True),
    sa.Column('comfortable_with_traffic', sa.Boolean(), nullable=True),
    sa.Column('comfortable_solo_outside', sa.Boolean(), nullable=True),
    sa.Column('max_jump_height', sa.Integer(), nullable=True),
    sa.Column('goals', sa.JSON(), nullable=True),
    sa.Column('personality_style', sa.JSON(), nullable=True),
    sa.Column('discipline_preferences', sa.JSON(), nullable=True),
    sa.Column('willing_tasks', sa.JSON(), nullable=True),
    sa.Column('task_frequency', sa.String(length=50), nullable=True),
    sa.Column('bitless_ok', sa.Boolean(), nullable=True),
    sa.Column('training_aids_ok', sa.Boolean(), nullable=True),
    sa.Column('health_limitations', sa.Text(), nullable=True),
    sa.Column('fears_anxieties', sa.Text(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('parent_consent', sa.Boolean(), nullable=True),
    sa.Column('parent_contact', sa.String(length=255), nullable=True),
    sa.Column('has_insurance', sa.Boolean(), nullable=True),
    sa.Column('insurance_details', sa.Text(), nullable=True),
    sa.Column('no_gos', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_rider_profiles_id'), 'rider_profiles', ['id'], unique=False)
    op.create_table('horse_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_profile_id', sa.Integer(), nullable=False),
    sa.Column('photos', sa.JSON(), nullable=True),
    sa.Column('video', sa.String(length=500), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('gender', sa.String(length=20), nullable=True),
    sa.Column('breed', sa.String(length=255), nullable=True),
    sa.Column('health_restrictions', sa.Text(), nullable=True),
    sa.Column('medication', sa.Text(), nullable=True),
    sa.Column('farrier_schedule', sa.String(length=255), nullable=True),
    sa.Column('physio_schedule', sa.String(length=255), nullable=True),
    sa.Column('energy_level', sa.String(length=50), nullable=True),
    sa.Column('temperament', sa.JSON(), nullable=True),
    sa.Column('triggers', sa.JSON(), nullable=True),
    sa.Column('enjoys', sa.JSON(), nullable=True),
    sa.Column('dislikes', sa.JSON(), nullable=True),
    sa.Column('disciplines', sa.JSON(), nullable=True),
    sa.Column('max_jump_height', sa.Integer(), nullable=True),
    sa.Column('suitable_for_beginners', sa.Boolean(), nullable=True),
    sa.Column('suitable_for_advanced', sa.Boolean(), nullable=True),
    sa.Column('suitable_for_experienced_only', sa.Boolean(), nullable=True),
    sa.Column('max_rider_weight', sa.Integer(), nullable=True),
    sa.Column('min_rider_height', sa.Integer(), nullable=True),
    sa.Column('max_rider_height', sa.Integer(), nullable=True),
    sa.Column('bit_bitless_policy', sa.String(length=50), nullable=True),
    sa.Column('spurs_allowed', sa.Boolean(), nullable=True),
    sa.Column('training_aids_allowed', sa.Boolean(), nullable=True),
    sa.Column('bareback_allowed', sa.Boolean(), nullable=True),
    sa.Column('required_tasks', sa.JSON(), nullable=True),
    sa.Column('optional_tasks', sa.JSON(), nullable=True),
    sa.Column('task_frequency', sa.String(length=50), nullable=True),
    sa.Column('indoor_arena', sa.Boolean(), nullable=True),
    sa.Column('outdoor_arena', sa.Boolean(), nullable=True),
    sa.Column('lighting', sa.Boolean(), nullable=True),
    sa.Column('longe_circle', sa.Boolean(), nullable=True),
    sa.Column('trail_access', sa.Boolean(), nullable=True),
    sa.Column('trailer_available', sa.Boolean(), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('no_gos', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['owner_profile_id'], ['owner_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_horse_profiles_id'), 'horse_profiles', ['id'], unique=False)
    op.create_table('matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rider_profile_id', sa.Integer(), nullable=False),
    sa.Column('horse_profile_id', sa.Integer(), nullable=False),
    sa.Column('rider_liked', sa.Boolean(), nullable=True),
    sa.Column('owner_liked', sa.Boolean(), nullable=True),
    sa.Column('is_mutual_match', sa.Boolean(), nullable=True),
    sa.Column('compatibility_score', sa.Float(), nullable=True),
    sa.Column('hard_filters_passed', sa.Boolean(), nullable=True),
    sa.Column('match_reasons', sa.JSON(), nullable=True),
    sa.Column('potential_issues', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['horse_profile_id'], ['horse_profiles.id'], ),
    sa.ForeignKeyConstraint(['rider_profile_id'], ['rider_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_matches_id'), 'matches', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_matches_id'), table_name='matches')
    op.drop_table('matches')
    op.drop_index(op.f('ix_horse_profiles_id'), table_name='horse_profiles')
    op.drop_table('horse_profiles')
    op.drop_index(op.f('ix_rider_profiles_id'), table_name='rider_profiles')
    op.drop_table('rider_profiles')
    op.drop_index(op.f('ix_owner_profiles_id'), table_name='owner_profiles')
    op.drop_table('owner_profiles')
    op.drop_index(op.f('ix_users_kinde_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
